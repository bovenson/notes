class Solution:
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        pas = {}
        for i in range(len(board)):
            for j in range(len(board[0])):
                cur = board[i][j]
                if cur == '.':  
                    continue
                elif not pas.get(cur):  
                    pas[cur] = [(i, j)]
                else:
                    # print('i:', i, ' j:', j)
                    for m, n in pas[cur]:
                        # print(m, n)
                        if m == i or n == j:
                            return False
                        if (i // 3 == m // 3 and i - m < 3) and (j // 3 == n // 3 and abs(j - n) < 3):
                            return False
                    pas[cur].append((i, j))
        return True


if __name__ == '__main__':
    s = Solution()
    bd = [["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]]
    bd = [
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
    res = s.isValidSudoku(bd)
    print(res)
        
